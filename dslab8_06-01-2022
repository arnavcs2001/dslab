// Data Structures
// Linked list implementation of stack / Implement Stack using Linked Representation 

#include <stdio.h>
#include <stdlib.h>

struct node   
{  
    int data;  
    struct node *next;  
};
  
struct node *head;  

void push()  
{  
    int val;  
    struct node *ptr;
    ptr = (struct node*)malloc(sizeof(struct node));   
    if(ptr == NULL)  
    {  
        printf("Not able to push the element\n");   
    }  
    else   
    {  
        printf("Enter the value: ");  
        scanf("%d",&val);  
        if(head == NULL)  
        {         
            ptr->data = val;  
            ptr -> next = NULL;  
            head = ptr;  
        }   
        else   
        {  
            ptr->data = val;  
            ptr->next = head;  
            head = ptr;  
        }  
        printf("Item pushed\n");  
    }  
}  
  
void pop()  
{   
    int item;
    struct node *ptr;  
    if(head == NULL)  
    {  
        printf("Underflow");  
    }  
    else  
    {  
        item = head->data;  
        ptr = head;  
        head = head->next;  
        free(ptr);  
        printf("Item popped: %d\n",item);  
    }  
}  

void display()  
{  
    struct node *ptr;  
    ptr = head;  
    if(ptr == NULL)  
    {  
        printf("Stack is empty\n");  
    }  
    else  
    {  
        printf("Printing Stack elements \n");  
        while(ptr != NULL)  
        {  
            printf("%d\n",ptr->data);  
            ptr = ptr->next;  
        }  
    }  
}  

int main()
{
    int choice;  
    while(choice != 4)   
    {  
        printf("Choose one option from the following list ...\n");  
        printf("\n1.Push\n2.Pop\n3.Display\n4.Exit\n"); 
                         
        printf("\nEnter your choice:\n");         
        scanf("\n%d",&choice);  
        switch(choice)  
        {  
            case 1:  
                    push();      
                    break;  
            case 2:  
                    pop();         
                    break;  
            case 3:  
                    display();       
                    break;  
            case 4:  
                    exit(0);  
                    break;  
            default:  
                    printf("Please enter valid choice..");  
        }  
    }  
    
    return 0;
}


// Data Structures
// Linked List implementation of Queue / Implement Queues using Linked Representation

#include <stdio.h>
#include <stdlib.h>

struct node   
{  
    int data;   
    struct node *next;  
};  

struct node *front;  
struct node *rear;   

void enqueue()  
{  
    struct node *ptr;  
    int item;   
      
    ptr = (struct node *) malloc (sizeof(struct node));  
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW\n");   
    }  
    else  
    {   
        printf("\nEnter value:\n");  
        scanf("%d",&item);  
        ptr -> data = item;  
        if(front == NULL)  
        {  
            front = ptr;  
            rear = ptr;   
            front -> next = NULL;  
            rear -> next = NULL;  
        }  
        else   
        {  
            rear -> next = ptr;  
            rear = ptr;  
            rear->next = NULL;  
        }  
    }  
}
     
void dequeue()  
{  
    struct node *ptr;  
    if(front == NULL)  
    {  
        printf("\nUNDERFLOW\n");  
    }  
    else   
    {  
        int item = front -> data;
        ptr = front;  
        front = front -> next;  
        free(ptr);
        printf("Item removed: %d\n",item);  
    }  
} 
 
void display()  
{  
    struct node *ptr;  
    ptr = front;      
    if(front == NULL)  
    {  
        printf("\nEmpty queue\n");  
    }  
    else  
    {   printf("\nPrinting values .....\n");  
        while(ptr != NULL)   
        {  
            printf("%d\n",ptr -> data);  
            ptr = ptr -> next;  
        }  
    }  
}  

int main()
{
    int choice;  
    while(choice != 4)   
    {  
        printf("Choose one option from the following list ...\n");  
        printf("\n1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\n"); 
                         
        printf("\nEnter your choice:\n");         
        scanf("%d",&choice);  
        switch(choice)  
        {  
            case 1:  
                    enqueue();      
                    break;  
            case 2:  
                    dequeue();         
                    break;  
            case 3:  
                    display();       
                    break;  
            case 4:  
                    exit(0);  
                    break;  
            default:  
                    printf("Please enter valid choice..");  
        }  
    }  
    
    return 0;
}
