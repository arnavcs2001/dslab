// Data Structures
// Program to convert infix expression to postfix using stack

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char A[100];
int top = -1;

int isEmpty()
{
    if(top == -1)
    {
        return 1;
    }
    else
    {
        return 0;   
    }
}

int isFull()
{
    if(top == 99)
    {
        return 1;
    }
    else
    {
        return 0;   
    }
}

void push(char val)
{
    if(isFull())
    {
        printf("Stack overflow!!");
    }
    else
    {
        top = top + 1;
        A[top] = val;    
    }
}

char pop()
{
    if(isEmpty())
    {
        printf("Stack underflow!!");
        return -1; // Error
    }
    else
    {
        char val = A[top];
        top = top - 1;
        return val;  
    }
}

int precedence(char z)
{
    if(z== '(')
    {
        return 0;
    }
    if(z== '+' || z == '-')
    {
        return 1;
    }
    if(z== '*' || z == '/')
    {
        return 2;
    }
    if(z== '^')
    {
        return 3;
    }
    return 0;
}

int main()
{
    char exp[100];
    char *e,x;
    printf("Enter the expression: ");
    scanf("%s",exp);
    e = exp;
    
    while(*e != '\0')
    {
        if(isalnum(*e))
        {
            printf("%c",*e);
        }
        else if(*e == '(')
        {
            push(*e);
        }
        else if(*e == ')')
        {
            while((x=pop()) != '(')
            {
                printf("%c",x);
            }
        }
        else
        {
            while(precedence(A[top])>=precedence(*e))
            {
                printf("%c",pop());
            }
            push(*e);
        }
        e++;
    }
    
    while(top != -1)
    {
        printf("%c",pop());
    }

    return 0;
}
