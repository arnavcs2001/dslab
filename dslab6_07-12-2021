// Data Structures
// Implementation of singly linked list

#include <stdio.h>  
#include <stdlib.h>  

struct node   
{  
    int data;  
    struct node *next;   
};  

struct node *head;  

void beginsert()  
{  
    struct node *ptr = (struct node *) malloc(sizeof(struct node *));   
    int item;   
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");  
    }  
    else  
    {  
        printf("\nEnter value\n");    
        scanf("%d",&item);    
        ptr->data = item;  
        ptr->next = head;  
        head = ptr;  
        printf("\nNode inserted\n");  
    }  
}  

void lastinsert()  
{  
    struct node *ptr,*temp;  
    int item;     
    ptr = (struct node*)malloc(sizeof(struct node));      
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");     
    }  
    else  
    {  
        printf("\nEnter value:\n");  
        scanf("%d",&item);  
        ptr->data = item;  
        if(head == NULL)  
        {  
            ptr -> next = NULL;  
            head = ptr;  
            printf("\nNode inserted\n");  
        }  
        else  
        {  
            temp = head;  
            while (temp -> next != NULL)  
            {  
                temp = temp -> next;  
            }  
            temp->next = ptr;  
            ptr->next = NULL;  
            printf("\nNode inserted\n");  
        }  
    }  
}  

void randominsert()  
{  
    int i,loc,item;   
    struct node *ptr, *temp;  
    ptr = (struct node *) malloc (sizeof(struct node));  
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");  
    }  
    else  
    {  
        printf("\nEnter element value:");  
        scanf("%d",&item);  
        ptr->data = item;  
        printf("\nEnter the location after which you want to insert: ");  
        scanf("\n%d",&loc);  
        temp=head;  
        for(i=0;i<loc;i++)  
        {  
            temp = temp->next;  
            if(temp == NULL)  
            {  
                printf("\ncan't insert\n");  
                return;  
            }  

        }  
        ptr ->next = temp ->next;   
        temp ->next = ptr;   
        printf("\nNode inserted\n");  
    }  
}  
void search()  
{  
    struct node *ptr;  
    int item,i=0,flag;  
    ptr = head;   
    if(ptr == NULL)  
    {  
        printf("\nEmpty List\n");  
    }  
    else  
    {   
        printf("\nEnter item which you want to search:\n");   
        scanf("%d",&item);  
        while (ptr!=NULL)  
        {  
            if(ptr->data == item)  
            {  
                printf("item found at location %d ",i+1);  
                flag=0;  
            }   
            else  
            {  
                flag=1;  
            }  
            i++;  
            ptr = ptr -> next;  
        }  
        if(flag==1)  
        {  
            printf("Item not found\n");  
        }  
    }     
}  

void display()  
{  
    struct node *ptr;  
    ptr = head;   
    if(ptr == NULL)  
    {  
        printf("Nothing to print");  
    }  
    else  
    {  
        printf("\nprinting values . . . . .\n");   
        while (ptr!=NULL)  
        {  
            printf("%d\n",ptr->data);  
            ptr = ptr -> next;  
        }  
    }  
}     

int main ()  
{  
    int choice;  
    while(choice != 9)   
    {  
        printf("Choose one option from the following list ...\n");  
        printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Search for an element\n5.Show\n6.Exit\n"); 

        printf("\nEnter your choice:\n");         
        scanf("\n%d",&choice);  
        switch(choice)  
        {  
            case 1:  
                    beginsert();      
                    break;  
            case 2:  
                    lastinsert();         
                    break;  
            case 3:  
                    randominsert();       
                    break;  
            case 4:  
                    search();         
                    break;  
            case 5:  
                    display();        
                    break;  
            case 6:  
                    exit(0);  
                    break;  
            default:  
                    printf("Please enter valid choice..");  
        }  
    }  

    return 0;
}
